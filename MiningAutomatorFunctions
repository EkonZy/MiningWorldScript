-- Mining World Automator - Funções Principais
-- Criado por: Claude

local MiningAutomator = {}

-- Referências importantes
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local hrp = character:WaitForChild("HumanoidRootPart")

-- Configurações
MiningAutomator.Config = {
    AutoMine = false,
    AutoTeleport = false,
    MiningDelay = 0.5,
    SelectedNodeTypes = {
        ["All"] = true  -- Minerar todos os tipos de nodes
    },
    Stats = {
        NodesMined = 0,
        MoneyEarned = 0,
        StartTime = 0
    }
}

-- Encontrar todos os nodes de minério no jogo
function MiningAutomator:FindOreNodes()
    local nodes = {}
    
    -- Procurar por nodes diretamente no workspace
    -- Neste jogo, os nodes parecem ser objetos com IDs longos
    for _, obj in pairs(workspace:GetChildren()) do
        -- Verificar se o objeto é um node baseado nas características observadas
        if obj:IsA("BasePart") or obj:IsA("Model") then
            -- Verificar se o nome parece ser um ID (formato hexadecimal longo)
            if string.match(obj.Name, "^%x+%-%x+%-%x+%-%x+") then
                table.insert(nodes, obj)
            end
        end
    end
    
    return nodes
end

-- Verificar se o jogador tem uma picareta equipada
function MiningAutomator:HasPickaxeEquipped()
    -- Verificar se o personagem tem uma ferramenta equipada
    local tool = character:FindFirstChildOfClass("Tool")
    
    if tool then
        -- Verificar se o nome da ferramenta contém "Pickaxe"
        if string.find(tool.Name:lower(), "pick") then
            return true, tool
        end
    end
    
    -- Se não tiver equipada, tentar equipar do inventário
    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") and string.find(item.Name:lower(), "pick") then
                item.Parent = character
                return true, item
            end
        end
    end
    
    return false, nil
end

-- Encontrar o node mais próximo
function MiningAutomator:FindNearestNode()
    local nodes = self:FindOreNodes()
    local nearestNode = nil
    local minDistance = math.huge
    
    for _, node in pairs(nodes) do
        local nodePosition
        if node:IsA("Model") and node.PrimaryPart then
            nodePosition = node.PrimaryPart.Position
        elseif node:IsA("BasePart") then
            nodePosition = node.Position
        else
            -- Tentar encontrar uma parte para usar como posição
            local part = node:FindFirstChildWhichIsA("BasePart")
            if part then
                nodePosition = part.Position
            else
                continue -- Pular este node se não conseguir encontrar uma posição
            end
        end
        
        local distance = (hrp.Position - nodePosition).Magnitude
        if distance < minDistance then
            minDistance = distance
            nearestNode = node
        end
    end
    
    return nearestNode
end

-- Teleportar para um node
function MiningAutomator:TeleportToNode(node)
    if not node then return false end
    
    local targetPosition
    if node:IsA("Model") and node.PrimaryPart then
        targetPosition = node.PrimaryPart.Position
    elseif node:IsA("BasePart") then
        targetPosition = node.Position
    else
        local part = node:FindFirstChildWhichIsA("BasePart")
        if part then
            targetPosition = part.Position
        else
            return false
        end
    end
    
    -- Adicionar um pequeno offset para não ficar dentro do node
    targetPosition = targetPosition + Vector3.new(0, 3, 0)
    
    -- Teleportar o personagem
    if self.Config.AutoTeleport then
        hrp.CFrame = CFrame.new(targetPosition)
        wait(0.1) -- Pequeno delay após teleporte
        return true
    end
    
    return false
end

-- Simular clique em um objeto
function MiningAutomator:SimulateClick(target)
    -- Verificar se temos o módulo VirtualUser para simular cliques
    local virtualUser = game:GetService("VirtualUser")
    if virtualUser then
        -- Simular clique na posição do alvo
        local position = target.Position
        virtualUser:CaptureController()
        virtualUser:ClickButton1(Vector2.new(position.X, position.Y))
        return true
    end
    
    return false
end

-- Minerar um node usando ferramenta
function MiningAutomator:MineNode(node)
    if not node then return false end
    
    -- Verificar se tem uma picareta equipada
    local hasPickaxe, pickaxe = self:HasPickaxeEquipped()
    if not hasPickaxe then
        print("Nenhuma picareta encontrada!")
        return false
    end
    
    -- Obter a parte alvo do node
    local targetPart
    if node:IsA("BasePart") then
        targetPart = node
    elseif node:IsA("Model") and node.PrimaryPart then
        targetPart = node.PrimaryPart
    else
        targetPart = node:FindFirstChildWhichIsA("BasePart")
    end
    
    if not targetPart then
        return false
    end
    
    -- Posicionar o jogador olhando para o node
    hrp.CFrame = CFrame.new(hrp.Position, targetPart.Position)
    
    -- Tentar usar Remote Events para minerar (primeiro método)
    local success = false
    
    -- Tentar encontrar e acionar o RemoteEvent para minerar
    -- (Note: Precisamos descobrir o RemoteEvent específico usado pelo jogo)
    -- Tenta alguns padrões comuns
    for _, remote in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if remote:IsA("RemoteEvent") then
            if string.match(remote.Name:lower(), "mine") or 
               string.match(remote.Name:lower(), "hit") or 
               string.match(remote.Name:lower(), "break") then
                -- Tentar acionar este remote
                pcall(function()
                    remote:FireServer(targetPart)
                end)
                wait(0.1)
                success = true
                break
            end
        end
    end
    
    -- Se não conseguir usar RemoteEvent, tentar método de clique
    if not success then
        -- Método alternativo: clicar e segurar no node
        self:SimulateClick(targetPart)
        wait(0.5) -- Manter clicado por meio segundo
    end
    
    -- Incrementar estatísticas
    self.Config.Stats.NodesMined = self.Config.Stats.NodesMined + 1
    
    -- Retornar sucesso
    return true
end

-- Teleportar para o vendedor
function MiningAutomator:TeleportToSeller()
    -- Procurar por NPCs que podem ser vendedores
    local seller
    
    -- Primeiro, procurar na pasta NPCs se existir
    local npcsFolder = workspace:FindFirstChild("NPCs")
    if npcsFolder then
        for _, npc in pairs(npcsFolder:GetChildren()) do
            if npc.Name:lower():find("sell") or 
               npc.Name:lower():find("merchant") or 
               npc.Name == "Alex" then
                seller = npc
                break
            end
        end
    end
    
    -- Se não encontrou na pasta NPCs, procurar no workspace
    if not seller then
        for _, obj in pairs(workspace:GetChildren()) do
            if obj.Name:lower():find("sell") or 
               obj.Name:lower():find("merchant") or 
               obj.Name == "Alex" then
                seller = obj
                break
            end
        end
    end
    
    if seller then
        local sellerPosition
        if seller:IsA("Model") and seller.PrimaryPart then
            sellerPosition = seller.PrimaryPart.Position
        elseif seller:IsA("BasePart") then
            sellerPosition = seller.Position
        else
            local part = seller:FindFirstChildWhichIsA("BasePart")
            if part then
                sellerPosition = part.Position
            else
                return false
            end
        end
        
        -- Adicionar um offset para ficar na frente do vendedor
        sellerPosition = sellerPosition + Vector3.new(0, 0, 5)
        
        -- Teleportar
        hrp.CFrame = CFrame.new(sellerPosition)
        return true
    end
    
    return false
end

-- Vender todos os itens
function MiningAutomator:SellAll()
    -- Primeiro, teleportar para o vendedor
    self:TeleportToSeller()
    wait(0.5) -- Esperar um pouco após teleporte
    
    -- Tentar encontrar botões de venda ou RemoteEvents relacionados
    -- Método 1: Procurar botões UI de venda
    local sellButton
    for _, ui in pairs(player.PlayerGui:GetDescendants()) do
        if ui:IsA("TextButton") and 
          (ui.Text:lower():find("sell") or ui.Name:lower():find("sell")) then
            sellButton = ui
            break
        end
    end
    
    if sellButton then
        -- Simular clique no botão
        local function simulateButtonClick(button)
            for _, connection in pairs(getconnections(button.MouseButton1Click)) do
                connection:Fire()
            end
            for _, connection in pairs(getconnections(button.Activated)) do
                connection:Fire()
            end
        end
        
        pcall(simulateButtonClick, sellButton)
    else
        -- Método 2: Procurar RemoteEvents relacionados a venda
        for _, remote in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
            if remote:IsA("RemoteEvent") and 
              (remote.Name:lower():find("sell") or remote.Name:lower():find("vend")) then
                -- Tentar acionar este remote sem argumentos
                pcall(function()
                    remote:FireServer()
                end)
                break
            end
        end
    end
    
    -- Atualizar dinheiro ganho (exemplo)
    -- Precisaríamos de uma maneira de rastrear o dinheiro real ganho
    local moneyGained = 1000 -- Valor mock apenas para teste
    self.Config.Stats.MoneyEarned = self.Config.Stats.MoneyEarned + moneyGained
    
    return true
end

-- Iniciar o ciclo de automação
function MiningAutomator:StartAutomation()
    self.Config.Stats.StartTime = os.time()
    self.IsRunning = true
    
    -- Criar uma loop que roda enquanto a automação estiver ativa
    spawn(function()
        while self.IsRunning and self.Config.AutoMine do
            -- Verificar se tem uma picareta equipada
            local hasPickaxe = self:HasPickaxeEquipped()
            if not hasPickaxe then
                print("Nenhuma picareta encontrada! Tentando novamente...")
                wait(1)
                continue
            end
            
            -- Encontrar o node mais próximo
            local nearestNode = self:FindNearestNode()
            
            if nearestNode then
                -- Teleportar para o node
                if self.Config.AutoTeleport then
                    self:TeleportToNode(nearestNode)
                end
                
                -- Minerar o node
                local success = self:MineNode(nearestNode)
                
                -- Esperar pelo delay configurado
                wait(self.Config.MiningDelay)
            else
                -- Se não encontrar nenhum node, esperar um pouco
                print("Nenhum node encontrado. Aguardando...")
                wait(1)
            end
        end
    end)
end

-- Parar a automação
function MiningAutomator:StopAutomation()
    self.IsRunning = false
end

-- Atualizar as estatísticas na GUI
function MiningAutomator:UpdateStats(gui)
    if not gui then return end
    
    local statsSection = gui:FindFirstChild("MainFrame"):FindFirstChild("LeftSection"):FindFirstChild("StatsSection")
    if statsSection then
        local nodesMinedLabel = statsSection:FindFirstChild("NodesMinedLabel")
        local timeRunningLabel = statsSection:FindFirstChild("TimeRunningLabel")
        local moneyEarnedLabel = statsSection:FindFirstChild("MoneyEarnedLabel")
        
        if nodesMinedLabel then
            nodesMinedLabel.Text = "Nodes Minerados: " .. self.Config.Stats.NodesMined
        end
        
        if timeRunningLabel and self.Config.Stats.StartTime > 0 then
            local runningTime = os.time() - self.Config.Stats.StartTime
            local hours = math.floor(runningTime / 3600)
            local minutes = math.floor((runningTime % 3600) / 60)
            local seconds = runningTime % 60
            timeRunningLabel.Text = string.format("Tempo Ativo: %02d:%02d:%02d", hours, minutes, seconds)
        end
        
        if moneyEarnedLabel then
            moneyEarnedLabel.Text = "Dinheiro Ganho: $" .. self.Config.Stats.MoneyEarned
        end
    end
end

-- Resetar estatísticas
function MiningAutomator:ResetStats()
    self.Config.Stats.NodesMined = 0
    self.Config.Stats.MoneyEarned = 0
    self.Config.Stats.StartTime = os.time()
end

return MiningAutomator 
